// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Lists operations.
    /// </summary>
    public partial interface ILists
    {
        /// <summary>
        /// Get a list
        /// </summary>
        /// This method will return a list.
        /// <param name='referenceCode'>
        /// The reference code of the list (example: BM25).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Property fields you want to return, defaults to referenceCode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GeocacheList>> GetListWithHttpMessagesAsync(string referenceCode, string apiVersion, string fields = "referenceCode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit a list
        /// </summary>
        /// This method will return the updated geocache list.
        /// <param name='referenceCode'>
        /// the unique identifier of the list (ex: BM100)
        /// </param>
        /// <param name='list'>
        /// The list to update
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Property fields you want to return, defaults to referenceCode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GeocacheList>> UpdateListWithHttpMessagesAsync(string referenceCode, GeocacheList list, string apiVersion, string fields = "referenceCode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a list
        /// </summary>
        /// This method will not return anything.
        /// <param name='referenceCode'>
        /// unique identifier of the list
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteListWithHttpMessagesAsync(string referenceCode, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a zipped file for a pocket query
        /// </summary>
        /// This method will return a zipped file.
        /// <param name='referenceCode'>
        /// identifier of the pocket query
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<byte[]>> GetZippedPocketQueryWithHttpMessagesAsync(string referenceCode, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a list of geocaches for a specified list
        /// </summary>
        /// This method will return a list of geocaches.
        /// <param name='referenceCode'>
        /// identifier of the list
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// how many geocaches to skip over
        /// </param>
        /// <param name='take'>
        /// how many geocaches to retrieve
        /// </param>
        /// <param name='lite'>
        /// whether to return lite geocaches or not
        /// </param>
        /// <param name='fields'>
        /// fields you want to return, defaults to "referenceCode"
        /// </param>
        /// <param name='expand'>
        /// fields to include with base geocache object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ListGeocache>>> GetGeocachesWithHttpMessagesAsync(string referenceCode, string apiVersion, int? skip = 0, int? take = 10, bool? lite = true, string fields = "referenceCode", string expand = "", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a geocache to a list
        /// </summary>
        /// This method will return the geocache added.
        /// <param name='referenceCode'>
        /// unique identifier of the list
        /// </param>
        /// <param name='geocache'>
        /// geocache to add to the list
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Property fields you want to return, defaults to referenceCode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Geocache>> AddGeocacheWithHttpMessagesAsync(string referenceCode, PostListGeocache geocache, string apiVersion, string fields = "referenceCode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a list
        /// </summary>
        /// This method will return the created geocache list.
        /// <param name='list'>
        /// The list to add
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Property fields you want to return, defaults to referenceCode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GeocacheList>> CreateListWithHttpMessagesAsync(PostGeocacheList list, string apiVersion, string fields = "referenceCode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add multiple geocaches to a list
        /// </summary>
        /// This method will return the successful and failed geocache codes.
        /// <param name='referenceCode'>
        /// unique identifier of the list
        /// </param>
        /// <param name='geocacheCodes'>
        /// geocache reference codes to add to the list
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BulkResponse>> AddGeocachesWithHttpMessagesAsync(string referenceCode, IList<string> geocacheCodes, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a geocache from a list
        /// </summary>
        /// This method will not return anything.
        /// <param name='referenceCode'>
        /// unique identifier of the list
        /// </param>
        /// <param name='geocacheReferenceCode'>
        /// unique identifier of the geocache to remove
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteGeocacheWithHttpMessagesAsync(string referenceCode, string geocacheReferenceCode, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
