// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// TrackableLogs operations.
    /// </summary>
    public partial interface ITrackableLogs
    {
        /// <summary>
        /// Get a single trackable log
        /// </summary>
        /// This method will return a single trackable log.
        /// <param name='referenceCode'>
        /// The reference code of the trackable log (example: TL100).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Property fields you want to return, defaults to referencecode
        /// </param>
        /// <param name='expand'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TrackableLog>> GetTrackableLogWithHttpMessagesAsync(string referenceCode, string apiVersion, string fields = "referencecode", string expand = "", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a trackable log
        /// </summary>
        /// This method will return a trackable log.
        /// <param name='referenceCode'>
        /// The log reference code (example: TL100).
        /// </param>
        /// <param name='log'>
        /// An instance of the log that is being modified. Text is the only
        /// modified parameter
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Property fields you want to return, defaults to referencecode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TrackableLog>> UpdateTrackableLogWithHttpMessagesAsync(string referenceCode, TrackableLog log, string apiVersion, string fields = "referencecode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a trackable log
        /// </summary>
        /// This method will not return anything in the body.
        /// <param name='referenceCode'>
        /// The reference code of the trackable log (example: TL100).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteTrackableLogWithHttpMessagesAsync(string referenceCode, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a the images attached to a trackable log
        /// </summary>
        /// This method will return a list of images.
        /// <param name='referenceCode'>
        /// The reference code of the trackable log (example: TL100).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// Amount of images to skip over used for pagination. Defaults to 0.
        /// </param>
        /// <param name='take'>
        /// Amount of images to include in results. Defaults to 10.
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return. Defaults to referencecode.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Image>>> GetImagesWithHttpMessagesAsync(string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "referencecode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add an image to a trackable log
        /// </summary>
        /// This method will return a single image.
        /// <param name='referenceCode'>
        /// The reference code of the trackable log (example: TL100).
        /// </param>
        /// <param name='image'>
        /// image to add
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Property fields you want to return, defaults to url
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Image>> AddImageWithHttpMessagesAsync(string referenceCode, PostImage image, string apiVersion, string fields = "url", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a log to a trackable
        /// </summary>
        /// This method will return the created trackable log.
        /// <param name='log'>
        /// The log to add
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Property fields you want to return, defaults to referencecode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TrackableLog>> CreateTrackableLogWithHttpMessagesAsync(PostTrackableLog log, string apiVersion, string fields = "referenceCode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a trackable log image
        /// </summary>
        /// This method will not return anything in the body.
        /// <param name='referenceCode'>
        /// The reference code of the trackable log (example: TL100).
        /// </param>
        /// <param name='imageGuid'>
        /// the guid of the image
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteTrackableLogImagesWithHttpMessagesAsync(string referenceCode, Guid imageGuid, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
