// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// GeocacheLogs operations.
    /// </summary>
    public partial interface IGeocacheLogs
    {
        /// <summary>
        /// Get a single geocache log
        /// </summary>
        /// This method will return a single geocache log.
        /// <param name='referenceCode'>
        /// The reference code of the geocache log (example: GL100).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='expand'>
        /// fields to include with base geocache log object
        /// </param>
        /// <param name='fields'>
        /// Property fields you want to return, defaults to referencecode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GeocacheLog>> GetGeocacheLogWithHttpMessagesAsync(string referenceCode, string apiVersion, string expand = "", string fields = "referencecode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a geocache log
        /// </summary>
        /// This method will return a geocache log.
        /// <param name='referenceCode'>
        /// The log reference code (example: GL100).
        /// </param>
        /// <param name='log'>
        /// An instance of the log that is being modified
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Property fields you want to return, defaults to referencecode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GeocacheLog>> UpdateGeocacheLogWithHttpMessagesAsync(string referenceCode, GeocacheLog log, string apiVersion, string fields = "referencecode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a geocache log
        /// </summary>
        /// This method will not have a response body.
        /// <param name='referenceCode'>
        /// The reference code of the geocache log (example: GL100).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteGeocacheLogWithHttpMessagesAsync(string referenceCode, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a the images attached to a geocache log
        /// </summary>
        /// This method will return a list of images.
        /// <param name='referenceCode'>
        /// The reference code of the geocache log (example: GL100).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// Amount of images to skip over used for pagination. Defaults to 0.
        /// </param>
        /// <param name='take'>
        /// Amount of images to include in results. Defaults to 10.
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return. Defaults to "url".
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Image>>> GetImagesWithHttpMessagesAsync(string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "url", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add an image to a geocache log
        /// </summary>
        /// This method will return a single Geocache.
        /// <param name='referenceCode'>
        /// The reference code of the geocache log (example: GL100).
        /// </param>
        /// <param name='image'>
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// fields to return on the response object, defaults to "url"
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Image>> AddImageWithHttpMessagesAsync(string referenceCode, PostImage image, string apiVersion, string fields = "url", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add a log to a geocache
        /// </summary>
        /// This method will return the created geocache log.
        /// <param name='log'>
        /// The log to add
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// the fields to return in the response body, defaults to
        /// referencecode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GeocacheLog>> CreateGeocacheLogWithHttpMessagesAsync(PostGeocacheLog log, string apiVersion, string fields = "referencecode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a geocache log image
        /// </summary>
        /// This method will not return anything in the body.
        /// <param name='referenceCode'>
        /// The reference code of the geocache log (example: GL100).
        /// </param>
        /// <param name='imageGuid'>
        /// the guid of the image
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteGeocacheLogImagesWithHttpMessagesAsync(string referenceCode, Guid imageGuid, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
