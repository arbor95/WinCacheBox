// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Lists.
    /// </summary>
    public static partial class ListsExtensions
    {
            /// <summary>
            /// Get a list
            /// </summary>
            /// This method will return a list.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the list (example: BM25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to referenceCode
            /// </param>
            public static GeocacheList GetList(this ILists operations, string referenceCode, string apiVersion, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((ILists)s).GetListAsync(referenceCode, apiVersion, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list
            /// </summary>
            /// This method will return a list.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the list (example: BM25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GeocacheList> GetListAsync(this ILists operations, string referenceCode, string apiVersion, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListWithHttpMessagesAsync(referenceCode, apiVersion, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edit a list
            /// </summary>
            /// This method will return the updated geocache list.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// the unique identifier of the list (ex: BM100)
            /// </param>
            /// <param name='list'>
            /// The list to update
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to referenceCode
            /// </param>
            public static GeocacheList UpdateList(this ILists operations, string referenceCode, GeocacheList list, string apiVersion, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((ILists)s).UpdateListAsync(referenceCode, list, apiVersion, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edit a list
            /// </summary>
            /// This method will return the updated geocache list.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// the unique identifier of the list (ex: BM100)
            /// </param>
            /// <param name='list'>
            /// The list to update
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GeocacheList> UpdateListAsync(this ILists operations, string referenceCode, GeocacheList list, string apiVersion, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateListWithHttpMessagesAsync(referenceCode, list, apiVersion, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a list
            /// </summary>
            /// This method will not return anything.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// unique identifier of the list
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            public static object DeleteList(this ILists operations, string referenceCode, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((ILists)s).DeleteListAsync(referenceCode, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a list
            /// </summary>
            /// This method will not return anything.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// unique identifier of the list
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteListAsync(this ILists operations, string referenceCode, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteListWithHttpMessagesAsync(referenceCode, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a zipped file for a pocket query
            /// </summary>
            /// This method will return a zipped file.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// identifier of the pocket query
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            public static byte[] GetZippedPocketQuery(this ILists operations, string referenceCode, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((ILists)s).GetZippedPocketQueryAsync(referenceCode, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a zipped file for a pocket query
            /// </summary>
            /// This method will return a zipped file.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// identifier of the pocket query
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<byte[]> GetZippedPocketQueryAsync(this ILists operations, string referenceCode, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetZippedPocketQueryWithHttpMessagesAsync(referenceCode, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of geocaches for a specified list
            /// </summary>
            /// This method will return a list of geocaches.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// identifier of the list
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many geocaches to skip over
            /// </param>
            /// <param name='take'>
            /// how many geocaches to retrieve
            /// </param>
            /// <param name='lite'>
            /// whether to return lite geocaches or not
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referenceCode"
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            public static IList<ListGeocache> GetGeocaches(this ILists operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, bool? lite = true, string fields = "referenceCode", string expand = "")
            {
                return Task.Factory.StartNew(s => ((ILists)s).GetGeocachesAsync(referenceCode, apiVersion, skip, take, lite, fields, expand), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of geocaches for a specified list
            /// </summary>
            /// This method will return a list of geocaches.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// identifier of the list
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many geocaches to skip over
            /// </param>
            /// <param name='take'>
            /// how many geocaches to retrieve
            /// </param>
            /// <param name='lite'>
            /// whether to return lite geocaches or not
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referenceCode"
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ListGeocache>> GetGeocachesAsync(this ILists operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, bool? lite = true, string fields = "referenceCode", string expand = "", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeocachesWithHttpMessagesAsync(referenceCode, apiVersion, skip, take, lite, fields, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a geocache to a list
            /// </summary>
            /// This method will return the geocache added.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// unique identifier of the list
            /// </param>
            /// <param name='geocache'>
            /// geocache to add to the list
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to referenceCode
            /// </param>
            public static Geocache AddGeocache(this ILists operations, string referenceCode, PostListGeocache geocache, string apiVersion, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((ILists)s).AddGeocacheAsync(referenceCode, geocache, apiVersion, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a geocache to a list
            /// </summary>
            /// This method will return the geocache added.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// unique identifier of the list
            /// </param>
            /// <param name='geocache'>
            /// geocache to add to the list
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Geocache> AddGeocacheAsync(this ILists operations, string referenceCode, PostListGeocache geocache, string apiVersion, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddGeocacheWithHttpMessagesAsync(referenceCode, geocache, apiVersion, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a list
            /// </summary>
            /// This method will return the created geocache list.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='list'>
            /// The list to add
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to referenceCode
            /// </param>
            public static GeocacheList CreateList(this ILists operations, PostGeocacheList list, string apiVersion, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((ILists)s).CreateListAsync(list, apiVersion, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a list
            /// </summary>
            /// This method will return the created geocache list.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='list'>
            /// The list to add
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GeocacheList> CreateListAsync(this ILists operations, PostGeocacheList list, string apiVersion, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateListWithHttpMessagesAsync(list, apiVersion, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add multiple geocaches to a list
            /// </summary>
            /// This method will return the successful and failed geocache codes.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// unique identifier of the list
            /// </param>
            /// <param name='geocacheCodes'>
            /// geocache reference codes to add to the list
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            public static BulkResponse AddGeocaches(this ILists operations, string referenceCode, IList<string> geocacheCodes, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((ILists)s).AddGeocachesAsync(referenceCode, geocacheCodes, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add multiple geocaches to a list
            /// </summary>
            /// This method will return the successful and failed geocache codes.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// unique identifier of the list
            /// </param>
            /// <param name='geocacheCodes'>
            /// geocache reference codes to add to the list
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BulkResponse> AddGeocachesAsync(this ILists operations, string referenceCode, IList<string> geocacheCodes, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddGeocachesWithHttpMessagesAsync(referenceCode, geocacheCodes, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a geocache from a list
            /// </summary>
            /// This method will not return anything.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// unique identifier of the list
            /// </param>
            /// <param name='geocacheReferenceCode'>
            /// unique identifier of the geocache to remove
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            public static object DeleteGeocache(this ILists operations, string referenceCode, string geocacheReferenceCode, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((ILists)s).DeleteGeocacheAsync(referenceCode, geocacheReferenceCode, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a geocache from a list
            /// </summary>
            /// This method will not return anything.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// unique identifier of the list
            /// </param>
            /// <param name='geocacheReferenceCode'>
            /// unique identifier of the geocache to remove
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteGeocacheAsync(this ILists operations, string referenceCode, string geocacheReferenceCode, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGeocacheWithHttpMessagesAsync(referenceCode, geocacheReferenceCode, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
