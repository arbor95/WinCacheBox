// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Trackables.
    /// </summary>
    public static partial class TrackablesExtensions
    {
            /// <summary>
            /// Get a single trackable
            /// </summary>
            /// This method will return a single trackable.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code or tracking number of the trackable (example: TB100).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='expand'>
            /// </param>
            public static Trackable GetTrackable(this ITrackables operations, string referenceCode, string apiVersion, string fields = "referenceCode", string expand = "")
            {
                return Task.Factory.StartNew(s => ((ITrackables)s).GetTrackableAsync(referenceCode, apiVersion, fields, expand), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single trackable
            /// </summary>
            /// This method will return a single trackable.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code or tracking number of the trackable (example: TB100).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='expand'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Trackable> GetTrackableAsync(this ITrackables operations, string referenceCode, string apiVersion, string fields = "referenceCode", string expand = "", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrackableWithHttpMessagesAsync(referenceCode, apiVersion, fields, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get paged geocoin types
            /// </summary>
            /// This method will return a list of geocoin types.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// Amount of types to skip over used for pagination. Defaults to 0.
            /// </param>
            /// <param name='take'>
            /// Amount of types to include in results. Defaults to 10.
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return. Defaults to id.
            /// </param>
            public static IList<TrackableType> GetGeocoinTypes(this ITrackables operations, string apiVersion, int? skip = 0, int? take = 10, string fields = "id")
            {
                return Task.Factory.StartNew(s => ((ITrackables)s).GetGeocoinTypesAsync(apiVersion, skip, take, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get paged geocoin types
            /// </summary>
            /// This method will return a list of geocoin types.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// Amount of types to skip over used for pagination. Defaults to 0.
            /// </param>
            /// <param name='take'>
            /// Amount of types to include in results. Defaults to 10.
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return. Defaults to id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TrackableType>> GetGeocoinTypesAsync(this ITrackables operations, string apiVersion, int? skip = 0, int? take = 10, string fields = "id", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeocoinTypesWithHttpMessagesAsync(apiVersion, skip, take, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the images attached to a trackable
            /// </summary>
            /// This method will return a list of images.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the trackable (example: TB100).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// Amount of images to skip over used for pagination. Defaults to 0.
            /// </param>
            /// <param name='take'>
            /// Amount of images to include in results. Defaults to 10.
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return. Defaults to url.
            /// </param>
            public static IList<Image> GetImages(this ITrackables operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "url")
            {
                return Task.Factory.StartNew(s => ((ITrackables)s).GetImagesAsync(referenceCode, apiVersion, skip, take, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the images attached to a trackable
            /// </summary>
            /// This method will return a list of images.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the trackable (example: TB100).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// Amount of images to skip over used for pagination. Defaults to 0.
            /// </param>
            /// <param name='take'>
            /// Amount of images to include in results. Defaults to 10.
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return. Defaults to url.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Image>> GetImagesAsync(this ITrackables operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "url", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImagesWithHttpMessagesAsync(referenceCode, apiVersion, skip, take, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of trackables
            /// </summary>
            /// This method will return a list of trackables, either by specified codes or
            /// get user trackables if you leave referenceCodes null
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='referenceCodes'>
            /// The reference code or tracking number of the trackables (example: TB100).
            /// Don't pass in this param if you want to return user trackables
            /// </param>
            /// <param name='type'>
            /// 1= inventory, 2 = collection, 3 = owned (default: 1). Possible values
            /// include: 'Inventory', 'Collection', 'Owned'
            /// </param>
            /// <param name='skip'>
            /// default = 0
            /// </param>
            /// <param name='take'>
            /// default = 10
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='expand'>
            /// </param>
            public static IList<Trackable> GetUserTrackables(this ITrackables operations, string apiVersion, string referenceCodes = default(string), string type = "1", int? skip = 0, int? take = 10, string fields = "referenceCode", string expand = "")
            {
                return Task.Factory.StartNew(s => ((ITrackables)s).GetUserTrackablesAsync(apiVersion, referenceCodes, type, skip, take, fields, expand), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of trackables
            /// </summary>
            /// This method will return a list of trackables, either by specified codes or
            /// get user trackables if you leave referenceCodes null
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='referenceCodes'>
            /// The reference code or tracking number of the trackables (example: TB100).
            /// Don't pass in this param if you want to return user trackables
            /// </param>
            /// <param name='type'>
            /// 1= inventory, 2 = collection, 3 = owned (default: 1). Possible values
            /// include: 'Inventory', 'Collection', 'Owned'
            /// </param>
            /// <param name='skip'>
            /// default = 0
            /// </param>
            /// <param name='take'>
            /// default = 10
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='expand'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Trackable>> GetUserTrackablesAsync(this ITrackables operations, string apiVersion, string referenceCodes = default(string), string type = "1", int? skip = 0, int? take = 10, string fields = "referenceCode", string expand = "", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserTrackablesWithHttpMessagesAsync(apiVersion, referenceCodes, type, skip, take, fields, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of trackable logs for the specified trackable
            /// </summary>
            /// This method will return a list of trackable logs.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the trackable (example: TB100).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many logs to skip over
            /// </param>
            /// <param name='take'>
            /// how many logs to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='expand'>
            /// </param>
            /// <param name='logTypes'>
            /// what log types to include with results. defaults to all
            /// </param>
            public static IList<TrackableLog> GetTrackableLogs(this ITrackables operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "referenceCode", string expand = "", string logTypes = default(string))
            {
                return Task.Factory.StartNew(s => ((ITrackables)s).GetTrackableLogsAsync(referenceCode, apiVersion, skip, take, fields, expand, logTypes), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of trackable logs for the specified trackable
            /// </summary>
            /// This method will return a list of trackable logs.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the trackable (example: TB100).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many logs to skip over
            /// </param>
            /// <param name='take'>
            /// how many logs to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='expand'>
            /// </param>
            /// <param name='logTypes'>
            /// what log types to include with results. defaults to all
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TrackableLog>> GetTrackableLogsAsync(this ITrackables operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "referenceCode", string expand = "", string logTypes = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrackableLogsWithHttpMessagesAsync(referenceCode, apiVersion, skip, take, fields, expand, logTypes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
