// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for LogDrafts.
    /// </summary>
    public static partial class LogDraftsExtensions
    {
            /// <summary>
            /// Get a single log draft for the calling user
            /// </summary>
            /// This method will return a single draft log.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the log draft (example: LD25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to referenceCode
            /// </param>
            public static LogDraft GetDraft(this ILogDrafts operations, string referenceCode, string apiVersion, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((ILogDrafts)s).GetDraftAsync(referenceCode, apiVersion, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single log draft for the calling user
            /// </summary>
            /// This method will return a single draft log.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the log draft (example: LD25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogDraft> GetDraftAsync(this ILogDrafts operations, string referenceCode, string apiVersion, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDraftWithHttpMessagesAsync(referenceCode, apiVersion, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a log draft
            /// </summary>
            /// This method will return the log draft edited.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The identifier of the log draft (ex: LD25)
            /// </param>
            /// <param name='logDraft'>
            /// The log draft to edit.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to referenceCode
            /// </param>
            public static LogDraft UpdateDraft(this ILogDrafts operations, string referenceCode, LogDraft logDraft, string apiVersion, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((ILogDrafts)s).UpdateDraftAsync(referenceCode, logDraft, apiVersion, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a log draft
            /// </summary>
            /// This method will return the log draft edited.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The identifier of the log draft (ex: LD25)
            /// </param>
            /// <param name='logDraft'>
            /// The log draft to edit.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogDraft> UpdateDraftAsync(this ILogDrafts operations, string referenceCode, LogDraft logDraft, string apiVersion, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDraftWithHttpMessagesAsync(referenceCode, logDraft, apiVersion, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a log draft
            /// </summary>
            /// This method will return no content.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The identifier of the log draft (ex: LD25)
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            public static object DeleteDraft(this ILogDrafts operations, string referenceCode, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((ILogDrafts)s).DeleteDraftAsync(referenceCode, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a log draft
            /// </summary>
            /// This method will return no content.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The identifier of the log draft (ex: LD25)
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDraftAsync(this ILogDrafts operations, string referenceCode, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDraftWithHttpMessagesAsync(referenceCode, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of log drafts for the calling user
            /// </summary>
            /// This method will return a page (list + total) of log drafts.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// How many drafts to skip (default = 0)
            /// </param>
            /// <param name='take'>
            /// How many drafts to return (default = 10)
            /// </param>
            /// <param name='sort'>
            /// How to sort the drafts (default = loggeddateutc)
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to referenceCode
            /// </param>
            public static IList<LogDraft> GetUserDrafts(this ILogDrafts operations, string apiVersion, int? skip = 0, int? take = 10, string sort = "dateloggedutc", string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((ILogDrafts)s).GetUserDraftsAsync(apiVersion, skip, take, sort, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of log drafts for the calling user
            /// </summary>
            /// This method will return a page (list + total) of log drafts.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// How many drafts to skip (default = 0)
            /// </param>
            /// <param name='take'>
            /// How many drafts to return (default = 10)
            /// </param>
            /// <param name='sort'>
            /// How to sort the drafts (default = loggeddateutc)
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LogDraft>> GetUserDraftsAsync(this ILogDrafts operations, string apiVersion, int? skip = 0, int? take = 10, string sort = "dateloggedutc", string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserDraftsWithHttpMessagesAsync(apiVersion, skip, take, sort, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a log draft
            /// </summary>
            /// This method will return the log draft created.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='logDraft'>
            /// The log draft to create.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to referenceCode
            /// </param>
            public static LogDraft CreateDraft(this ILogDrafts operations, PostLogDraft logDraft, string apiVersion, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((ILogDrafts)s).CreateDraftAsync(logDraft, apiVersion, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a log draft
            /// </summary>
            /// This method will return the log draft created.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='logDraft'>
            /// The log draft to create.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogDraft> CreateDraftAsync(this ILogDrafts operations, PostLogDraft logDraft, string apiVersion, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDraftWithHttpMessagesAsync(logDraft, apiVersion, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Promote Log Draft to Geocache Log
            /// </summary>
            /// This method will return the promoted draft info.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='draft'>
            /// The draft to promote to log
            /// </param>
            /// <param name='referenceCode'>
            /// identifier of the log draft
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            public static PromotedDraft PromoteToGeocacheLog(this ILogDrafts operations, LogDraft draft, string referenceCode, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((ILogDrafts)s).PromoteToGeocacheLogAsync(draft, referenceCode, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Promote Log Draft to Geocache Log
            /// </summary>
            /// This method will return the promoted draft info.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='draft'>
            /// The draft to promote to log
            /// </param>
            /// <param name='referenceCode'>
            /// identifier of the log draft
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PromotedDraft> PromoteToGeocacheLogAsync(this ILogDrafts operations, LogDraft draft, string referenceCode, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PromoteToGeocacheLogWithHttpMessagesAsync(draft, referenceCode, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add image to log draft
            /// </summary>
            /// This method will return the image created.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// The image to upload and add
            /// </param>
            /// <param name='referenceCode'>
            /// identifier of the log draft
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to url
            /// </param>
            public static Image AddImage(this ILogDrafts operations, PostImage image, string referenceCode, string apiVersion, string fields = "url")
            {
                return Task.Factory.StartNew(s => ((ILogDrafts)s).AddImageAsync(image, referenceCode, apiVersion, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add image to log draft
            /// </summary>
            /// This method will return the image created.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='image'>
            /// The image to upload and add
            /// </param>
            /// <param name='referenceCode'>
            /// identifier of the log draft
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to url
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Image> AddImageAsync(this ILogDrafts operations, PostImage image, string referenceCode, string apiVersion, string fields = "url", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddImageWithHttpMessagesAsync(image, referenceCode, apiVersion, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
