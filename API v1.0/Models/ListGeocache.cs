// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class ListGeocache
    {
        /// <summary>
        /// Initializes a new instance of the ListGeocache class.
        /// </summary>
        public ListGeocache() { }

        /// <summary>
        /// Initializes a new instance of the ListGeocache class.
        /// </summary>
        public ListGeocache(string listItemName = default(string), string referenceCode = default(string), string name = default(string), double? difficulty = default(double?), double? terrain = default(double?), int? favoritePoints = default(int?), int? findCount = default(int?), int? trackableCount = default(int?), DateTime? placedDate = default(DateTime?), DateTime? publishedDate = default(DateTime?), DateTime? eventEndDate = default(DateTime?), string type = default(string), GeocacheType geocacheType = default(GeocacheType), string size = default(string), GeocacheSize geocacheSize = default(GeocacheSize), UserData userData = default(UserData), string status = default(string), Location location = default(Location), Coordinates postedCoordinates = default(Coordinates), DateTime? lastVisitedDate = default(DateTime?), string ownerCode = default(string), User owner = default(User), string ownerAlias = default(string), bool? isPremiumOnly = default(bool?), string shortDescription = default(string), string longDescription = default(string), string hints = default(string), IList<Attribute> attributes = default(IList<Attribute>), string ianaTimezoneId = default(string), string relatedWebPage = default(string), string backgroundImageUrl = default(string), string url = default(string), bool? containsHtml = default(bool?), IList<AdditionalWaypoint> additionalWaypoints = default(IList<AdditionalWaypoint>), IList<Trackable> trackables = default(IList<Trackable>), IList<GeocacheLog> geocacheLogs = default(IList<GeocacheLog>), IList<Image> images = default(IList<Image>), IList<UserWaypoint> userWaypoints = default(IList<UserWaypoint>), IList<GeoTour> geoTours = default(IList<GeoTour>))
        {
            ListItemName = listItemName;
            ReferenceCode = referenceCode;
            Name = name;
            Difficulty = difficulty;
            Terrain = terrain;
            FavoritePoints = favoritePoints;
            FindCount = findCount;
            TrackableCount = trackableCount;
            PlacedDate = placedDate;
            PublishedDate = publishedDate;
            EventEndDate = eventEndDate;
            Type = type;
            GeocacheType = geocacheType;
            Size = size;
            GeocacheSize = geocacheSize;
            UserData = userData;
            Status = status;
            Location = location;
            PostedCoordinates = postedCoordinates;
            LastVisitedDate = lastVisitedDate;
            OwnerCode = ownerCode;
            Owner = owner;
            OwnerAlias = ownerAlias;
            IsPremiumOnly = isPremiumOnly;
            ShortDescription = shortDescription;
            LongDescription = longDescription;
            Hints = hints;
            Attributes = attributes;
            IanaTimezoneId = ianaTimezoneId;
            RelatedWebPage = relatedWebPage;
            BackgroundImageUrl = backgroundImageUrl;
            Url = url;
            ContainsHtml = containsHtml;
            AdditionalWaypoints = additionalWaypoints;
            Trackables = trackables;
            GeocacheLogs = geocacheLogs;
            Images = images;
            UserWaypoints = userWaypoints;
            GeoTours = geoTours;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "listItemName")]
        public string ListItemName { get; set; }

        /// <summary>
        /// This code uniquely identifies the geocache
        /// </summary>
        [JsonProperty(PropertyName = "referenceCode")]
        public string ReferenceCode { get; set; }

        /// <summary>
        /// Name of the Geocache
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Difficulty of cache between 1.0 and 5.0
        /// </summary>
        [JsonProperty(PropertyName = "difficulty")]
        public double? Difficulty { get; set; }

        /// <summary>
        /// Terrain of cache between 1.0 and 5.0
        /// </summary>
        [JsonProperty(PropertyName = "terrain")]
        public double? Terrain { get; set; }

        /// <summary>
        /// The number of favorite points on the Geocache
        /// </summary>
        [JsonProperty(PropertyName = "favoritePoints")]
        public int? FavoritePoints { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "findCount")]
        public int? FindCount { get; set; }

        /// <summary>
        /// The number of trackables on the Geocache
        /// </summary>
        [JsonProperty(PropertyName = "trackableCount")]
        public int? TrackableCount { get; set; }

        /// <summary>
        /// Date the geocache was placed (If the Geocache is an event then
        /// this represents the date of the event).
        /// </summary>
        [JsonProperty(PropertyName = "placedDate")]
        public DateTime? PlacedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "publishedDate")]
        public DateTime? PublishedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "eventEndDate")]
        public DateTime? EventEndDate { get; set; }

        /// <summary>
        /// The type of Geocache. Possible values include: 'Traditional',
        /// 'MultiCache', 'Virtual', 'Letterbox', 'Event', 'Mystery',
        /// 'ProjectApe', 'Webcam', 'Locationless', 'Cito', 'EarthCache',
        /// 'MegaEvent', 'GpsAdventuresExhibit', 'Wherigo',
        /// 'LostAndFoundEvent', 'GeocachingHq', 'LostAndFoundCelebration',
        /// 'BlockParty', 'GigaEvent'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geocacheType")]
        public GeocacheType GeocacheType { get; set; }

        /// <summary>
        /// Container or Size of cache. Possible values include: 'Unknown',
        /// 'Micro', 'Regular', 'Large', 'Virtual', 'Other', 'Small'
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public string Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geocacheSize")]
        public GeocacheSize GeocacheSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userData")]
        public UserData UserData { get; set; }

        /// <summary>
        /// The state of the Geocache. Possible values include: 'Unpublished',
        /// 'Active', 'Disabled', 'Locked', 'Archived'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// The posted coordinates of the Geocache
        /// </summary>
        [JsonProperty(PropertyName = "postedCoordinates")]
        public Coordinates PostedCoordinates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastVisitedDate")]
        public DateTime? LastVisitedDate { get; set; }

        /// <summary>
        /// The reference code of the geocache owner
        /// </summary>
        [JsonProperty(PropertyName = "ownerCode")]
        public string OwnerCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public User Owner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ownerAlias")]
        public string OwnerAlias { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isPremiumOnly")]
        public bool? IsPremiumOnly { get; set; }

        /// <summary>
        /// Summary or short description of the geocache.
        /// </summary>
        [JsonProperty(PropertyName = "shortDescription")]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Detailed description of the geocache.
        /// </summary>
        [JsonProperty(PropertyName = "longDescription")]
        public string LongDescription { get; set; }

        /// <summary>
        /// Hints to find the geocache.
        /// </summary>
        [JsonProperty(PropertyName = "hints")]
        public string Hints { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attributes")]
        public IList<Attribute> Attributes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ianaTimezoneId")]
        public string IanaTimezoneId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relatedWebPage")]
        public string RelatedWebPage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "backgroundImageUrl")]
        public string BackgroundImageUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "containsHtml")]
        public bool? ContainsHtml { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "additionalWaypoints")]
        public IList<AdditionalWaypoint> AdditionalWaypoints { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trackables")]
        public IList<Trackable> Trackables { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geocacheLogs")]
        public IList<GeocacheLog> GeocacheLogs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "images")]
        public IList<Image> Images { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userWaypoints")]
        public IList<UserWaypoint> UserWaypoints { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geoTours")]
        public IList<GeoTour> GeoTours { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.UserData != null)
            {
                this.UserData.Validate();
            }
            if (this.PostedCoordinates != null)
            {
                this.PostedCoordinates.Validate();
            }
            if (this.Owner != null)
            {
                this.Owner.Validate();
            }
            if (this.AdditionalWaypoints != null)
            {
                foreach (var element in this.AdditionalWaypoints)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Trackables != null)
            {
                foreach (var element1 in this.Trackables)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.GeocacheLogs != null)
            {
                foreach (var element2 in this.GeocacheLogs)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (this.UserWaypoints != null)
            {
                foreach (var element3 in this.UserWaypoints)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (this.GeoTours != null)
            {
                foreach (var element4 in this.GeoTours)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
        }
    }
}
