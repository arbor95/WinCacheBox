// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class AdditionalWaypoint
    {
        /// <summary>
        /// Initializes a new instance of the AdditionalWaypoint class.
        /// </summary>
        public AdditionalWaypoint() { }

        /// <summary>
        /// Initializes a new instance of the AdditionalWaypoint class.
        /// </summary>
        public AdditionalWaypoint(string referenceCode = default(string), string name = default(string), Coordinates coordinates = default(Coordinates), string description = default(string), int? typeId = default(int?), string typeName = default(string), string prefix = default(string), string url = default(string))
        {
            ReferenceCode = referenceCode;
            Name = name;
            Coordinates = coordinates;
            Description = description;
            TypeId = typeId;
            TypeName = typeName;
            Prefix = prefix;
            Url = url;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "referenceCode")]
        public string ReferenceCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "coordinates")]
        public Coordinates Coordinates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typeName")]
        public string TypeName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "prefix")]
        public string Prefix { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.Coordinates != null)
            {
                this.Coordinates.Validate();
            }
        }
    }
}
