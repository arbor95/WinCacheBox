// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class TrackableLog
    {
        /// <summary>
        /// Initializes a new instance of the TrackableLog class.
        /// </summary>
        public TrackableLog() { }

        /// <summary>
        /// Initializes a new instance of the TrackableLog class.
        /// </summary>
        public TrackableLog(DateTime loggedDate, string text, string referenceCode = default(string), string ownerCode = default(string), User owner = default(User), int? imageCount = default(int?), string url = default(string), string geocacheName = default(string), IList<Image> images = default(IList<Image>), string trackableCode = default(string), string geocacheCode = default(string), bool? isRot13Encoded = default(bool?), int? typeId = default(int?), TrackableLogType trackableLogType = default(TrackableLogType), Coordinates coordinates = default(Coordinates))
        {
            ReferenceCode = referenceCode;
            OwnerCode = ownerCode;
            Owner = owner;
            ImageCount = imageCount;
            Url = url;
            GeocacheName = geocacheName;
            Images = images;
            TrackableCode = trackableCode;
            GeocacheCode = geocacheCode;
            LoggedDate = loggedDate;
            Text = text;
            IsRot13Encoded = isRot13Encoded;
            TypeId = typeId;
            TrackableLogType = trackableLogType;
            Coordinates = coordinates;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "referenceCode")]
        public string ReferenceCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ownerCode")]
        public string OwnerCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public User Owner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imageCount")]
        public int? ImageCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geocacheName")]
        public string GeocacheName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "images")]
        public IList<Image> Images { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trackableCode")]
        public string TrackableCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geocacheCode")]
        public string GeocacheCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "loggedDate")]
        public DateTime LoggedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isRot13Encoded")]
        public bool? IsRot13Encoded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public int? TypeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trackableLogType")]
        public TrackableLogType TrackableLogType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "coordinates")]
        public Coordinates Coordinates { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Text == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Text");
            }
            if (this.Owner != null)
            {
                this.Owner.Validate();
            }
            if (this.Coordinates != null)
            {
                this.Coordinates.Validate();
            }
        }
    }
}
