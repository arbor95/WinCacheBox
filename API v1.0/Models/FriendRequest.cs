// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class FriendRequest
    {
        /// <summary>
        /// Initializes a new instance of the FriendRequest class.
        /// </summary>
        public FriendRequest() { }

        /// <summary>
        /// Initializes a new instance of the FriendRequest class.
        /// </summary>
        public FriendRequest(string requestedUserCode, string message, int? id = default(int?), string requestorUserCode = default(string), UserReference requestor = default(UserReference), UserReference requested = default(UserReference), bool? isOutgoing = default(bool?), DateTime? requestDateUtc = default(DateTime?))
        {
            Id = id;
            RequestorUserCode = requestorUserCode;
            Requestor = requestor;
            RequestedUserCode = requestedUserCode;
            Requested = requested;
            Message = message;
            IsOutgoing = isOutgoing;
            RequestDateUtc = requestDateUtc;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestorUserCode")]
        public string RequestorUserCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestor")]
        public UserReference Requestor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestedUserCode")]
        public string RequestedUserCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requested")]
        public UserReference Requested { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isOutgoing")]
        public bool? IsOutgoing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestDateUtc")]
        public DateTime? RequestDateUtc { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (RequestedUserCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RequestedUserCode");
            }
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
        }
    }
}
