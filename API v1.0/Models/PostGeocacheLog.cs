// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class PostGeocacheLog
    {
        /// <summary>
        /// Initializes a new instance of the PostGeocacheLog class.
        /// </summary>
        public PostGeocacheLog() { }

        /// <summary>
        /// Initializes a new instance of the PostGeocacheLog class.
        /// </summary>
        public PostGeocacheLog(DateTime loggedDate, string text, string geocacheCode, string type = default(string), GeocacheLogType geocacheLogType = default(GeocacheLogType), Coordinates updatedCoordinates = default(Coordinates), bool? usedFavoritePoint = default(bool?))
        {
            LoggedDate = loggedDate;
            Text = text;
            Type = type;
            GeocacheLogType = geocacheLogType;
            UpdatedCoordinates = updatedCoordinates;
            GeocacheCode = geocacheCode;
            UsedFavoritePoint = usedFavoritePoint;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "loggedDate")]
        public DateTime LoggedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geocacheLogType")]
        public GeocacheLogType GeocacheLogType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedCoordinates")]
        public Coordinates UpdatedCoordinates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geocacheCode")]
        public string GeocacheCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "usedFavoritePoint")]
        public bool? UsedFavoritePoint { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Text == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Text");
            }
            if (GeocacheCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GeocacheCode");
            }
            if (this.UpdatedCoordinates != null)
            {
                this.UpdatedCoordinates.Validate();
            }
        }
    }
}
