// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class User
    {
        /// <summary>
        /// Initializes a new instance of the User class.
        /// </summary>
        public User() { }

        /// <summary>
        /// Initializes a new instance of the User class.
        /// </summary>
        public User(int? membershipLevelId = default(int?), DateTime? joinedDateUtc = default(DateTime?), int? findCount = default(int?), int? hideCount = default(int?), int? favoritePoints = default(int?), Coordinates homeCoordinates = default(Coordinates), GeocacheLimit geocacheLimits = default(GeocacheLimit), string profileText = default(string), string bannerUrl = default(string), string url = default(string), bool? isFriend = default(bool?), bool? optedInFriendSharing = default(bool?), IList<GeocacheCount> geocacheFindCounts = default(IList<GeocacheCount>), IList<GeocacheCount> geocacheHideCounts = default(IList<GeocacheCount>), IList<TrackableCount> trackableFindCounts = default(IList<TrackableCount>), IList<TrackableCount> trackableOwnedCounts = default(IList<TrackableCount>), string referenceCode = default(string), string username = default(string), string avatarUrl = default(string))
        {
            MembershipLevelId = membershipLevelId;
            JoinedDateUtc = joinedDateUtc;
            FindCount = findCount;
            HideCount = hideCount;
            FavoritePoints = favoritePoints;
            HomeCoordinates = homeCoordinates;
            GeocacheLimits = geocacheLimits;
            ProfileText = profileText;
            BannerUrl = bannerUrl;
            Url = url;
            IsFriend = isFriend;
            OptedInFriendSharing = optedInFriendSharing;
            GeocacheFindCounts = geocacheFindCounts;
            GeocacheHideCounts = geocacheHideCounts;
            TrackableFindCounts = trackableFindCounts;
            TrackableOwnedCounts = trackableOwnedCounts;
            ReferenceCode = referenceCode;
            Username = username;
            AvatarUrl = avatarUrl;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "membershipLevelId")]
        public int? MembershipLevelId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "joinedDateUtc")]
        public DateTime? JoinedDateUtc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "findCount")]
        public int? FindCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hideCount")]
        public int? HideCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "favoritePoints")]
        public int? FavoritePoints { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "homeCoordinates")]
        public Coordinates HomeCoordinates { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geocacheLimits")]
        public GeocacheLimit GeocacheLimits { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "profileText")]
        public string ProfileText { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bannerUrl")]
        public string BannerUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isFriend")]
        public bool? IsFriend { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "optedInFriendSharing")]
        public bool? OptedInFriendSharing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geocacheFindCounts")]
        public IList<GeocacheCount> GeocacheFindCounts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geocacheHideCounts")]
        public IList<GeocacheCount> GeocacheHideCounts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trackableFindCounts")]
        public IList<TrackableCount> TrackableFindCounts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trackableOwnedCounts")]
        public IList<TrackableCount> TrackableOwnedCounts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "referenceCode")]
        public string ReferenceCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "avatarUrl")]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.HomeCoordinates != null)
            {
                this.HomeCoordinates.Validate();
            }
        }
    }
}
