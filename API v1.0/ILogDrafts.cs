// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// LogDrafts operations.
    /// </summary>
    public partial interface ILogDrafts
    {
        /// <summary>
        /// Get a single log draft for the calling user
        /// </summary>
        /// This method will return a single draft log.
        /// <param name='referenceCode'>
        /// The reference code of the log draft (example: LD25).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return, defaults to referenceCode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LogDraft>> GetDraftWithHttpMessagesAsync(string referenceCode, string apiVersion, string fields = "referenceCode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a log draft
        /// </summary>
        /// This method will return the log draft edited.
        /// <param name='referenceCode'>
        /// The identifier of the log draft (ex: LD25)
        /// </param>
        /// <param name='logDraft'>
        /// The log draft to edit.
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return, defaults to referenceCode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LogDraft>> UpdateDraftWithHttpMessagesAsync(string referenceCode, LogDraft logDraft, string apiVersion, string fields = "referenceCode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a log draft
        /// </summary>
        /// This method will return no content.
        /// <param name='referenceCode'>
        /// The identifier of the log draft (ex: LD25)
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteDraftWithHttpMessagesAsync(string referenceCode, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a list of log drafts for the calling user
        /// </summary>
        /// This method will return a page (list + total) of log drafts.
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// How many drafts to skip (default = 0)
        /// </param>
        /// <param name='take'>
        /// How many drafts to return (default = 10)
        /// </param>
        /// <param name='sort'>
        /// How to sort the drafts (default = loggeddateutc)
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return, defaults to referenceCode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<LogDraft>>> GetUserDraftsWithHttpMessagesAsync(string apiVersion, int? skip = 0, int? take = 10, string sort = "dateloggedutc", string fields = "referenceCode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a log draft
        /// </summary>
        /// This method will return the log draft created.
        /// <param name='logDraft'>
        /// The log draft to create.
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return, defaults to referenceCode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LogDraft>> CreateDraftWithHttpMessagesAsync(PostLogDraft logDraft, string apiVersion, string fields = "referenceCode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Promote Log Draft to Geocache Log
        /// </summary>
        /// This method will return the promoted draft info.
        /// <param name='draft'>
        /// The draft to promote to log
        /// </param>
        /// <param name='referenceCode'>
        /// identifier of the log draft
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PromotedDraft>> PromoteToGeocacheLogWithHttpMessagesAsync(LogDraft draft, string referenceCode, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add image to log draft
        /// </summary>
        /// This method will return the image created.
        /// <param name='image'>
        /// The image to upload and add
        /// </param>
        /// <param name='referenceCode'>
        /// identifier of the log draft
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return, defaults to url
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Image>> AddImageWithHttpMessagesAsync(PostImage image, string referenceCode, string apiVersion, string fields = "url", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
