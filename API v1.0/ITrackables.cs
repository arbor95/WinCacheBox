// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Trackables operations.
    /// </summary>
    public partial interface ITrackables
    {
        /// <summary>
        /// Get a single trackable
        /// </summary>
        /// This method will return a single trackable.
        /// <param name='referenceCode'>
        /// The reference code or tracking number of the trackable (example:
        /// TB100).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// fields you want to return, defaults to referenceCode
        /// </param>
        /// <param name='expand'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Trackable>> GetTrackableWithHttpMessagesAsync(string referenceCode, string apiVersion, string fields = "referenceCode", string expand = "", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get paged geocoin types
        /// </summary>
        /// This method will return a list of geocoin types.
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// Amount of types to skip over used for pagination. Defaults to 0.
        /// </param>
        /// <param name='take'>
        /// Amount of types to include in results. Defaults to 10.
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return. Defaults to id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TrackableType>>> GetGeocoinTypesWithHttpMessagesAsync(string apiVersion, int? skip = 0, int? take = 10, string fields = "id", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the images attached to a trackable
        /// </summary>
        /// This method will return a list of images.
        /// <param name='referenceCode'>
        /// The reference code of the trackable (example: TB100).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// Amount of images to skip over used for pagination. Defaults to 0.
        /// </param>
        /// <param name='take'>
        /// Amount of images to include in results. Defaults to 10.
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return. Defaults to url.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Image>>> GetImagesWithHttpMessagesAsync(string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "url", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of trackables
        /// </summary>
        /// This method will return a list of trackables, either by specified
        /// codes or get user trackables if you leave referenceCodes null
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='referenceCodes'>
        /// The reference code or tracking number of the trackables (example:
        /// TB100). Don't pass in this param if you want to return user
        /// trackables
        /// </param>
        /// <param name='type'>
        /// 1= inventory, 2 = collection, 3 = owned (default: 1). Possible
        /// values include: 'Inventory', 'Collection', 'Owned'
        /// </param>
        /// <param name='skip'>
        /// default = 0
        /// </param>
        /// <param name='take'>
        /// default = 10
        /// </param>
        /// <param name='fields'>
        /// fields you want to return, defaults to referenceCode
        /// </param>
        /// <param name='expand'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Trackable>>> GetUserTrackablesWithHttpMessagesAsync(string apiVersion, string referenceCodes = default(string), string type = "1", int? skip = 0, int? take = 10, string fields = "referenceCode", string expand = "", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a list of trackable logs for the specified trackable
        /// </summary>
        /// This method will return a list of trackable logs.
        /// <param name='referenceCode'>
        /// The reference code of the trackable (example: TB100).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// how many logs to skip over
        /// </param>
        /// <param name='take'>
        /// how many logs to retrieve
        /// </param>
        /// <param name='fields'>
        /// fields you want to return, defaults to referenceCode
        /// </param>
        /// <param name='expand'>
        /// </param>
        /// <param name='logTypes'>
        /// what log types to include with results. defaults to all
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TrackableLog>>> GetTrackableLogsWithHttpMessagesAsync(string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "referenceCode", string expand = "", string logTypes = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
