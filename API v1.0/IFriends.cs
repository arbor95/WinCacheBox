// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Friends operations.
    /// </summary>
    public partial interface IFriends
    {
        /// <summary>
        /// Get a list of friends for the calling user
        /// </summary>
        /// This method will return a list of Users.
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// How many friends to skip (default = 0)
        /// </param>
        /// <param name='take'>
        /// How many friends to return (default = 10, max = 50)
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return, defaults to referenceCode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<User>>> GetFriendsWithHttpMessagesAsync(string apiVersion, int? skip = 0, int? take = 10, string fields = "referenceCode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a list of friend requests for the calling user
        /// </summary>
        /// This method will return a list of requests including both inbound
        /// and outbound requests.
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// How many requests to skip (default = 0)
        /// </param>
        /// <param name='take'>
        /// How many requests to return (default = 10, max = 50)
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return, defaults to id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<FriendRequest>>> GetFriendRequestsWithHttpMessagesAsync(string apiVersion, int? skip = 0, int? take = 10, string fields = "id", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a friend request
        /// </summary>
        /// This method will return the friend request created.
        /// <param name='friendRequest'>
        /// The friend request to create.
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return, defaults to id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FriendRequest>> CreateFriendRequestWithHttpMessagesAsync(FriendRequest friendRequest, string apiVersion, string fields = "id", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Accept a friend request
        /// </summary>
        /// <param name='requestId'>
        /// friend request identifier
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AcceptFriendRequestWithHttpMessagesAsync(int requestId, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Removes a friend
        /// </summary>
        /// This method will return no content.
        /// <param name='userCode'>
        /// The identifier of the friend (their user reference code)
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RemoveFriendWithHttpMessagesAsync(string userCode, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a friend request
        /// </summary>
        /// This method will return no content.
        /// <param name='requestId'>
        /// The identifier of the friend request
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteFriendRequestWithHttpMessagesAsync(int requestId, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
