// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for GeoTours.
    /// </summary>
    public static partial class GeoToursExtensions
    {
            /// <summary>
            /// Get a GeoTour
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// Identifier of the GeoTour (e.g. GT7)
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to "referencecode"
            /// </param>
            public static IList<GeoTour> GetGeoTour(this IGeoTours operations, string referenceCode, string apiVersion, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IGeoTours)s).GetGeoTourAsync(referenceCode, apiVersion, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a GeoTour
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// Identifier of the GeoTour (e.g. GT7)
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to "referencecode"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GeoTour>> GetGeoTourAsync(this IGeoTours operations, string referenceCode, string apiVersion, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeoTourWithHttpMessagesAsync(referenceCode, apiVersion, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get GeoTours
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='sort'>
            /// Defaults to unsorted (distance, name). If using distance sorting, must
            /// provide latitude and longitude (e.g. dist+:[47,-122])
            /// </param>
            /// <param name='skip'>
            /// Defaults to 0, how many geocaches to skip
            /// </param>
            /// <param name='take'>
            /// Defaults to 20, how many geocaches to return
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to "referencecode"
            /// </param>
            public static IList<GeoTour> GetGeoTours(this IGeoTours operations, string apiVersion, string sort = "", int? skip = 0, int? take = 20, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IGeoTours)s).GetGeoToursAsync(apiVersion, sort, skip, take, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get GeoTours
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='sort'>
            /// Defaults to unsorted (distance, name). If using distance sorting, must
            /// provide latitude and longitude (e.g. dist+:[47,-122])
            /// </param>
            /// <param name='skip'>
            /// Defaults to 0, how many geocaches to skip
            /// </param>
            /// <param name='take'>
            /// Defaults to 20, how many geocaches to return
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to "referencecode"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GeoTour>> GetGeoToursAsync(this IGeoTours operations, string apiVersion, string sort = "", int? skip = 0, int? take = 20, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeoToursWithHttpMessagesAsync(apiVersion, sort, skip, take, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the geocaches on the GeoTour
            /// </summary>
            /// This method will return a list of geocaches.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// Identifier of the GeoTour (e.g. GT7)
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='lite'>
            /// Select to return a geocache object without the description and hints
            /// </param>
            /// <param name='skip'>
            /// Defaults to 0, how many geocaches to skip
            /// </param>
            /// <param name='take'>
            /// Defaults to 20, how many geocaches to return
            /// </param>
            /// <param name='sort'>
            /// Options are distance (must provide lat/lng), name (of the geocache),
            /// favorites, and geotour (order defined by GeoTour). Defaults to geotour.
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referencecode"
            /// </param>
            public static IList<Geocache> GetGeocachesByGeoTour(this IGeoTours operations, string referenceCode, string apiVersion, bool? lite = false, int? skip = 0, int? take = 20, string sort = "gt+", string expand = "", string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IGeoTours)s).GetGeocachesByGeoTourAsync(referenceCode, apiVersion, lite, skip, take, sort, expand, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the geocaches on the GeoTour
            /// </summary>
            /// This method will return a list of geocaches.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// Identifier of the GeoTour (e.g. GT7)
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='lite'>
            /// Select to return a geocache object without the description and hints
            /// </param>
            /// <param name='skip'>
            /// Defaults to 0, how many geocaches to skip
            /// </param>
            /// <param name='take'>
            /// Defaults to 20, how many geocaches to return
            /// </param>
            /// <param name='sort'>
            /// Options are distance (must provide lat/lng), name (of the geocache),
            /// favorites, and geotour (order defined by GeoTour). Defaults to geotour.
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referencecode"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Geocache>> GetGeocachesByGeoTourAsync(this IGeoTours operations, string referenceCode, string apiVersion, bool? lite = false, int? skip = 0, int? take = 20, string sort = "gt+", string expand = "", string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeocachesByGeoTourWithHttpMessagesAsync(referenceCode, apiVersion, lite, skip, take, sort, expand, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
