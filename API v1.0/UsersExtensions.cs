// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Users.
    /// </summary>
    public static partial class UsersExtensions
    {
            /// <summary>
            /// Get a user
            /// </summary>
            /// This method will return a user.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the user (example: PR18).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to referenceCode
            /// </param>
            public static User GetUser(this IUsers operations, string referenceCode, string apiVersion, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IUsers)s).GetUserAsync(referenceCode, apiVersion, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a user
            /// </summary>
            /// This method will return a user.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the user (example: PR18).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> GetUserAsync(this IUsers operations, string referenceCode, string apiVersion, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserWithHttpMessagesAsync(referenceCode, apiVersion, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the images attached to a user profile
            /// </summary>
            /// This method will return a list of images.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the user (example: PR18).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// Amount of images to skip over used for pagination. Defaults to 0.
            /// </param>
            /// <param name='take'>
            /// Amount of images to include in results. Defaults to 10.
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return. Defaults to url.
            /// </param>
            public static IList<Image> GetImages(this IUsers operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "url")
            {
                return Task.Factory.StartNew(s => ((IUsers)s).GetImagesAsync(referenceCode, apiVersion, skip, take, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the images attached to a user profile
            /// </summary>
            /// This method will return a list of images.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the user (example: PR18).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// Amount of images to skip over used for pagination. Defaults to 0.
            /// </param>
            /// <param name='take'>
            /// Amount of images to include in results. Defaults to 10.
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return. Defaults to url.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Image>> GetImagesAsync(this IUsers operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "url", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImagesWithHttpMessagesAsync(referenceCode, apiVersion, skip, take, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an account's souvenirs
            /// </summary>
            /// This method will return a list of souvenirs.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the user (example: PR18).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to title
            /// </param>
            public static IList<Souvenir> GetSouvenirs(this IUsers operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 20, string fields = "title")
            {
                return Task.Factory.StartNew(s => ((IUsers)s).GetSouvenirsAsync(referenceCode, apiVersion, skip, take, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an account's souvenirs
            /// </summary>
            /// This method will return a list of souvenirs.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the user (example: PR18).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='fields'>
            /// Property fields you want to return, defaults to title
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Souvenir>> GetSouvenirsAsync(this IUsers operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 20, string fields = "title", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSouvenirsWithHttpMessagesAsync(referenceCode, apiVersion, skip, take, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of users
            /// </summary>
            /// This method will return a list of users.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='referenceCodes'>
            /// comma delimited list of user reference codes to retrieve (example:
            /// PR1,PR2,PR3)
            /// </param>
            /// <param name='usernames'>
            /// comma delimited list of usernames to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referenceCode"
            /// </param>
            public static IList<User> GetUsers(this IUsers operations, string apiVersion, string referenceCodes = default(string), string usernames = default(string), string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IUsers)s).GetUsersAsync(apiVersion, referenceCodes, usernames, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of users
            /// </summary>
            /// This method will return a list of users.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='referenceCodes'>
            /// comma delimited list of user reference codes to retrieve (example:
            /// PR1,PR2,PR3)
            /// </param>
            /// <param name='usernames'>
            /// comma delimited list of usernames to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referenceCode"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<User>> GetUsersAsync(this IUsers operations, string apiVersion, string referenceCodes = default(string), string usernames = default(string), string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(apiVersion, referenceCodes, usernames, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of user's geocache lists
            /// </summary>
            /// This method will return a list of geocache lists.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// user identifier, use "me" to get lists for calling user
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='types'>
            /// comma delimited list of list types to return (fl, wl, il, bm, pq).
            /// Defaults to "bm"
            /// </param>
            /// <param name='skip'>
            /// how many lists to skip over
            /// </param>
            /// <param name='take'>
            /// how many lists to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            public static IList<GeocacheList> GetLists(this IUsers operations, string referenceCode, string apiVersion, string types = "bm", int? skip = 0, int? take = 10, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IUsers)s).GetListsAsync(referenceCode, apiVersion, types, skip, take, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of user's geocache lists
            /// </summary>
            /// This method will return a list of geocache lists.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// user identifier, use "me" to get lists for calling user
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='types'>
            /// comma delimited list of list types to return (fl, wl, il, bm, pq).
            /// Defaults to "bm"
            /// </param>
            /// <param name='skip'>
            /// how many lists to skip over
            /// </param>
            /// <param name='take'>
            /// how many lists to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GeocacheList>> GetListsAsync(this IUsers operations, string referenceCode, string apiVersion, string types = "bm", int? skip = 0, int? take = 10, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListsWithHttpMessagesAsync(referenceCode, apiVersion, types, skip, take, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of a user's geocache logs
            /// </summary>
            /// This method will return a list of geocache lists.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// user identifier, use "me" to get lists for calling user
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many lists to skip over
            /// </param>
            /// <param name='take'>
            /// how many lists to retrieve
            /// </param>
            /// <param name='afterDate'>
            /// filters results to logs with logdates after this date (inclusive)
            /// </param>
            /// <param name='beforeDate'>
            /// filters results to logs with logdates before this date (inclusive)
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='includeArchived'>
            /// flag to include archived logs
            /// </param>
            /// <param name='logTypes'>
            /// log types to include in response, defaults to all
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache log object
            /// </param>
            public static IList<GeocacheLog> GetGeocacheLogs(this IUsers operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, DateTime? afterDate = default(DateTime?), DateTime? beforeDate = default(DateTime?), string fields = "referenceCode", bool? includeArchived = false, string logTypes = default(string), string expand = "")
            {
                return Task.Factory.StartNew(s => ((IUsers)s).GetGeocacheLogsAsync(referenceCode, apiVersion, skip, take, afterDate, beforeDate, fields, includeArchived, logTypes, expand), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of a user's geocache logs
            /// </summary>
            /// This method will return a list of geocache lists.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// user identifier, use "me" to get lists for calling user
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many lists to skip over
            /// </param>
            /// <param name='take'>
            /// how many lists to retrieve
            /// </param>
            /// <param name='afterDate'>
            /// filters results to logs with logdates after this date (inclusive)
            /// </param>
            /// <param name='beforeDate'>
            /// filters results to logs with logdates before this date (inclusive)
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='includeArchived'>
            /// flag to include archived logs
            /// </param>
            /// <param name='logTypes'>
            /// log types to include in response, defaults to all
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache log object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GeocacheLog>> GetGeocacheLogsAsync(this IUsers operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, DateTime? afterDate = default(DateTime?), DateTime? beforeDate = default(DateTime?), string fields = "referenceCode", bool? includeArchived = false, string logTypes = default(string), string expand = "", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeocacheLogsWithHttpMessagesAsync(referenceCode, apiVersion, skip, take, afterDate, beforeDate, fields, includeArchived, logTypes, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
