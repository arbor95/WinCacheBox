// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Geocaches.
    /// </summary>
    public static partial class GeocachesExtensions
    {
            /// <summary>
            /// Get a single Geocache
            /// </summary>
            /// This method will return a single Geocache.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the geocache (example: GC25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='lite'>
            /// Select to return a geocache object without the description and hints
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referenceCode"
            /// </param>
            public static Geocache GetGeocache(this IGeocaches operations, string referenceCode, string apiVersion, bool? lite = false, string expand = "", string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IGeocaches)s).GetGeocacheAsync(referenceCode, apiVersion, lite, expand, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single Geocache
            /// </summary>
            /// This method will return a single Geocache.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the geocache (example: GC25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='lite'>
            /// Select to return a geocache object without the description and hints
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referenceCode"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Geocache> GetGeocacheAsync(this IGeocaches operations, string referenceCode, string apiVersion, bool? lite = false, string expand = "", string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeocacheWithHttpMessagesAsync(referenceCode, apiVersion, lite, expand, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of images for a geocache
            /// </summary>
            /// This method will return a list of images.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the geocache (example: GC25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many images to skip
            /// </param>
            /// <param name='take'>
            /// how many images to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "url"
            /// </param>
            public static IList<Image> GetImages(this IGeocaches operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "url")
            {
                return Task.Factory.StartNew(s => ((IGeocaches)s).GetImagesAsync(referenceCode, apiVersion, skip, take, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of images for a geocache
            /// </summary>
            /// This method will return a list of images.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the geocache (example: GC25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many images to skip
            /// </param>
            /// <param name='take'>
            /// how many images to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "url"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Image>> GetImagesAsync(this IGeocaches operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "url", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImagesWithHttpMessagesAsync(referenceCode, apiVersion, skip, take, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of Users that have favorited a geocache
            /// </summary>
            /// This method will return a list of users.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the geocache (example: GC25)
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many users to skip
            /// </param>
            /// <param name='take'>
            /// how many users to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referenceCode"
            /// </param>
            public static IList<User> GetFavoritedBy(this IGeocaches operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IGeocaches)s).GetFavoritedByAsync(referenceCode, apiVersion, skip, take, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Users that have favorited a geocache
            /// </summary>
            /// This method will return a list of users.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the geocache (example: GC25)
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many users to skip
            /// </param>
            /// <param name='take'>
            /// how many users to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referenceCode"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<User>> GetFavoritedByAsync(this IGeocaches operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFavoritedByWithHttpMessagesAsync(referenceCode, apiVersion, skip, take, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of geocaches
            /// </summary>
            /// This method will return a list of geocaches.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCodes'>
            /// comma delimited list of geocache reference codes to retrieve (example:
            /// GC25,GC26,GC27).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='lite'>
            /// Select to return a geocache object without the description and hints
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referenceCode"
            /// </param>
            public static IList<Geocache> GetGeocaches(this IGeocaches operations, string referenceCodes, string apiVersion, bool? lite = false, string expand = "", string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IGeocaches)s).GetGeocachesAsync(referenceCodes, apiVersion, lite, expand, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of geocaches
            /// </summary>
            /// This method will return a list of geocaches.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCodes'>
            /// comma delimited list of geocache reference codes to retrieve (example:
            /// GC25,GC26,GC27).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='lite'>
            /// Select to return a geocache object without the description and hints
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to "referenceCode"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Geocache>> GetGeocachesAsync(this IGeocaches operations, string referenceCodes, string apiVersion, bool? lite = false, string expand = "", string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeocachesWithHttpMessagesAsync(referenceCodes, apiVersion, lite, expand, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of trackables in a geocache
            /// </summary>
            /// This method will return a list of trackables.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the geocache (example: GC25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many trackables to skip
            /// </param>
            /// <param name='take'>
            /// how many trackables to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='expand'>
            /// </param>
            public static IList<Trackable> GetTrackables(this IGeocaches operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "referenceCode", string expand = "")
            {
                return Task.Factory.StartNew(s => ((IGeocaches)s).GetTrackablesAsync(referenceCode, apiVersion, skip, take, fields, expand), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of trackables in a geocache
            /// </summary>
            /// This method will return a list of trackables.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the geocache (example: GC25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many trackables to skip
            /// </param>
            /// <param name='take'>
            /// how many trackables to retrieve
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='expand'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Trackable>> GetTrackablesAsync(this IGeocaches operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string fields = "referenceCode", string expand = "", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrackablesWithHttpMessagesAsync(referenceCode, apiVersion, skip, take, fields, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of geocache logs for the specified geocache
            /// </summary>
            /// This method will return a list of geocache logs.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the geocache (example: GC25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many logs to skip over
            /// </param>
            /// <param name='take'>
            /// how many logs to retrieve
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            public static IList<GeocacheLog> GetLogs(this IGeocaches operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string expand = "", string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IGeocaches)s).GetLogsAsync(referenceCode, apiVersion, skip, take, expand, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of geocache logs for the specified geocache
            /// </summary>
            /// This method will return a list of geocache logs.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The reference code of the geocache (example: GC25).
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='skip'>
            /// how many logs to skip over
            /// </param>
            /// <param name='take'>
            /// how many logs to retrieve
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='fields'>
            /// fields you want to return, defaults to referenceCode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GeocacheLog>> GetLogsAsync(this IGeocaches operations, string referenceCode, string apiVersion, int? skip = 0, int? take = 10, string expand = "", string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLogsWithHttpMessagesAsync(referenceCode, apiVersion, skip, take, expand, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search for Geocaches
            /// </summary>
            /// This method will return search results.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='q'>
            /// The query used on the geocaches
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='sort'>
            /// Defaults to distance if coords are provided otherwise favoritepoints
            /// (distance, favorites, cachename, size, difficulty, terrain, founddate,
            /// placeddate, id)
            /// </param>
            /// <param name='lite'>
            /// Return a lite version of geocache (no description, hint, or
            /// </param>
            /// <param name='skip'>
            /// Defaults to 0, how many geocaches to skip
            /// </param>
            /// <param name='take'>
            /// Defaults to 20, how many geocaches to return
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to "referencecode"
            /// </param>
            public static IList<Geocache> Search(this IGeocaches operations, string q, string apiVersion, string sort = "", bool? lite = true, int? skip = 0, int? take = 50, string expand = "", string fields = "referenceCode")
            {
                return Task.Factory.StartNew(s => ((IGeocaches)s).SearchAsync(q, apiVersion, sort, lite, skip, take, expand, fields), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for Geocaches
            /// </summary>
            /// This method will return search results.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='q'>
            /// The query used on the geocaches
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='sort'>
            /// Defaults to distance if coords are provided otherwise favoritepoints
            /// (distance, favorites, cachename, size, difficulty, terrain, founddate,
            /// placeddate, id)
            /// </param>
            /// <param name='lite'>
            /// Return a lite version of geocache (no description, hint, or
            /// </param>
            /// <param name='skip'>
            /// Defaults to 0, how many geocaches to skip
            /// </param>
            /// <param name='take'>
            /// Defaults to 20, how many geocaches to return
            /// </param>
            /// <param name='expand'>
            /// fields to include with base geocache object
            /// </param>
            /// <param name='fields'>
            /// Properties you want to return, defaults to "referencecode"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Geocache>> SearchAsync(this IGeocaches operations, string q, string apiVersion, string sort = "", bool? lite = true, int? skip = 0, int? take = 50, string expand = "", string fields = "referenceCode", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchWithHttpMessagesAsync(q, apiVersion, sort, lite, skip, take, expand, fields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
