// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// UserWaypoints operations.
    /// </summary>
    public partial interface IUserWaypoints
    {
        /// <summary>
        /// Get a list of user waypoints for the calling user
        /// </summary>
        /// This method will return an array of user waypoints.
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// How many waypoints to skip (default = 0)
        /// </param>
        /// <param name='take'>
        /// How many drafts to return (default = 10)
        /// </param>
        /// <param name='includeCorrectedCoordinates'>
        /// Include corrected coordinates in the results. default = false
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return (default = referenceCode)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserWaypoint>>> GetUserWaypointsWithHttpMessagesAsync(string apiVersion, int? skip = 0, int? take = 10, bool? includeCorrectedCoordinates = false, string fields = "referencecode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a user waypoint
        /// </summary>
        /// This method will return the user waypoint created.
        /// <param name='userWaypoint'>
        /// The user waypoint to create.
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return (default = referenceCode)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserWaypoint>> CreateUserWaypointWithHttpMessagesAsync(PostUserWaypoint userWaypoint, string apiVersion, string fields = "referencecode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the user waypoints for a geocache
        /// </summary>
        /// This method will return a paged list of userwaypoints
        /// <param name='referenceCode'>
        /// The reference code of the geocache (example: GC25).
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='skip'>
        /// How many user waypoints to skip. default = 0
        /// </param>
        /// <param name='take'>
        /// How many user waypoints to include in result set. default = 10
        /// </param>
        /// <param name='includeCorrectedCoordinates'>
        /// Include corrected coordinates in the results. default = false
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return. default = referencecode
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserWaypoint>>> GetGeocacheUserWaypointsWithHttpMessagesAsync(string referenceCode, string apiVersion, int? skip = 0, int? take = 10, bool? includeCorrectedCoordinates = false, string fields = "referencecode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a user waypoint
        /// </summary>
        /// This method will return the updated user waypoint.
        /// <param name='referenceCode'>
        /// The identifier of the user waypoint
        /// </param>
        /// <param name='userWaypoint'>
        /// The user waypoint to update.
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return (default = referenceCode)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserWaypoint>> UpdateUserWaypointWithHttpMessagesAsync(string referenceCode, UserWaypoint userWaypoint, string apiVersion, string fields = "referencecode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a user waypoint
        /// </summary>
        /// This method will return no content.
        /// <param name='referenceCode'>
        /// The identifier of the user waypoint
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteUserWaypointWithHttpMessagesAsync(string referenceCode, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upsert a corrected coordinate for the calling user
        /// </summary>
        /// This method will return the created or updated corrected
        /// coordinate.
        /// <param name='referenceCode'>
        /// the geocache identifier
        /// </param>
        /// <param name='coordinates'>
        /// The corrected coordinates to upsert
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='fields'>
        /// Properties you want to return (default = referenceCode)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserWaypoint>> UpsertCorrectedCoordinatesWithHttpMessagesAsync(string referenceCode, Coordinates coordinates, string apiVersion, string fields = "referencecode", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a corrected coordinate for the calling user
        /// </summary>
        /// <param name='referenceCode'>
        /// geocache identifier
        /// </param>
        /// <param name='apiVersion'>
        /// The requested API version
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DeleteCorrectedCoordinatesWithHttpMessagesAsync(string referenceCode, string apiVersion, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
