// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace GeocachingAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for GeocacheNotes.
    /// </summary>
    public static partial class GeocacheNotesExtensions
    {
            /// <summary>
            /// Upsert a geocache note for the calling user
            /// </summary>
            /// This method will return the upserted text.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The identifier of the geocache (ex: GC25)
            /// </param>
            /// <param name='geocacheNote'>
            /// The geocache note text.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            public static string UpsertNote(this IGeocacheNotes operations, string referenceCode, GeocacheNote geocacheNote, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((IGeocacheNotes)s).UpsertNoteAsync(referenceCode, geocacheNote, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert a geocache note for the calling user
            /// </summary>
            /// This method will return the upserted text.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The identifier of the geocache (ex: GC25)
            /// </param>
            /// <param name='geocacheNote'>
            /// The geocache note text.
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpsertNoteAsync(this IGeocacheNotes operations, string referenceCode, GeocacheNote geocacheNote, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertNoteWithHttpMessagesAsync(referenceCode, geocacheNote, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a geocache note for the calling user
            /// </summary>
            /// This method will return no content.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The identifier of the geocache (ex: GC25)
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            public static object DeleteNote(this IGeocacheNotes operations, string referenceCode, string apiVersion)
            {
                return Task.Factory.StartNew(s => ((IGeocacheNotes)s).DeleteNoteAsync(referenceCode, apiVersion), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a geocache note for the calling user
            /// </summary>
            /// This method will return no content.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceCode'>
            /// The identifier of the geocache (ex: GC25)
            /// </param>
            /// <param name='apiVersion'>
            /// The requested API version
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteNoteAsync(this IGeocacheNotes operations, string referenceCode, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteNoteWithHttpMessagesAsync(referenceCode, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
